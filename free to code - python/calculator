import tkinter as tk
from tkinter import messagebox

class Calculator:
    def __init__(self, root):
        self.root = root
        self.root.title("Python Calculator")
        self.root.geometry("300x400")
        self.root.resizable(False, False)
        self.root.configure(bg="#f0f0f0")
        
        # Calculator display
        self.display_var = tk.StringVar()
        self.display_var.set("0")
        
        # Calculator state
        self.first_operand = 0
        self.operation = None
        self.reset_display = False
        
        self.create_widgets()
    
    def create_widgets(self):
        # Display
        display_frame = tk.Frame(self.root, bg="#f0f0f0")
        display_frame.pack(pady=10, padx=10, fill="x")
        
        display = tk.Entry(display_frame, textvariable=self.display_var, font=("Arial", 24), 
                           bd=5, relief=tk.RIDGE, justify="right", bg="white", readonlybackground="#e0e0e0")
        display.pack(fill="x")
        display.config(state="readonly")
        
        # Buttons frame
        buttons_frame = tk.Frame(self.root, bg="#f0f0f0")
        buttons_frame.pack(pady=10, padx=10, fill="both", expand=True)
        
        # Configure grid layout
        for i in range(5):
            buttons_frame.grid_rowconfigure(i, weight=1)
        for i in range(4):
            buttons_frame.grid_columnconfigure(i, weight=1)
        
        # Button styling
        button_font = ("Arial", 14)
        number_bg = "#ffffff"
        operator_bg = "#ffd700"
        clear_bg = "#ff6b6b"
        equal_bg = "#4CAF50"
        
        # Number buttons
        self.create_button(buttons_frame, "7", 1, 0, button_font, number_bg, lambda: self.add_digit("7"))
        self.create_button(buttons_frame, "8", 1, 1, button_font, number_bg, lambda: self.add_digit("8"))
        self.create_button(buttons_frame, "9", 1, 2, button_font, number_bg, lambda: self.add_digit("9"))
        self.create_button(buttons_frame, "4", 2, 0, button_font, number_bg, lambda: self.add_digit("4"))
        self.create_button(buttons_frame, "5", 2, 1, button_font, number_bg, lambda: self.add_digit("5"))
        self.create_button(buttons_frame, "6", 2, 2, button_font, number_bg, lambda: self.add_digit("6"))
        self.create_button(buttons_frame, "1", 3, 0, button_font, number_bg, lambda: self.add_digit("1"))
        self.create_button(buttons_frame, "2", 3, 1, button_font, number_bg, lambda: self.add_digit("2"))
        self.create_button(buttons_frame, "3", 3, 2, button_font, number_bg, lambda: self.add_digit("3"))
        self.create_button(buttons_frame, "0", 4, 0, button_font, number_bg, lambda: self.add_digit("0"), 2)
        self.create_button(buttons_frame, ".", 4, 2, button_font, number_bg, self.add_decimal)
        
        # Operator buttons
        self.create_button(buttons_frame, "+", 1, 3, button_font, operator_bg, lambda: self.set_operation("+"))
        self.create_button(buttons_frame, "-", 2, 3, button_font, operator_bg, lambda: self.set_operation("-"))
        self.create_button(buttons_frame, "×", 3, 3, button_font, operator_bg, lambda: self.set_operation("*"))
        self.create_button(buttons_frame, "÷", 0, 3, button_font, operator_bg, lambda: self.set_operation("/"))
        self.create_button(buttons_frame, "=", 4, 3, button_font, equal_bg, self.calculate)
        
        # Clear and additional buttons
        self.create_button(buttons_frame, "C", 0, 0, button_font, clear_bg, self.clear)
        self.create_button(buttons_frame, "CE", 0, 1, button_font, clear_bg, self.clear_entry)
        self.create_button(buttons_frame, "±", 0, 2, button_font, operator_bg, self.negate)
    
    def create_button(self, parent, text, row, col, font, bg, command, colspan=1):
        button = tk.Button(parent, text=text, font=font, bg=bg, bd=3, relief=tk.RAISED, command=command)
        button.grid(row=row, column=col, columnspan=colspan, padx=5, pady=5, sticky="nsew")
        return button
    
    def add_digit(self, digit):
        if self.reset_display:
            self.display_var.set("0")
            self.reset_display = False
        
        current = self.display_var.get()
        if current == "0":
            self.display_var.set(digit)
        else:
            self.display_var.set(current + digit)
    
    def add_decimal(self):
        if self.reset_display:
            self.display_var.set("0")
            self.reset_display = False
        
        current = self.display_var.get()
        if "." not in current:
            self.display_var.set(current + ".")
    
    def set_operation(self, op):
        self.first_operand = float(self.display_var.get())
        self.operation = op
        self.reset_display = True
    
    def negate(self):
        current = self.display_var.get()
        if current != "0":
            if current.startswith("-"):
                self.display_var.set(current[1:])
            else:
                self.display_var.set("-" + current)
    
    def calculate(self):
        if self.operation is None:
            return
        
        second_operand = float(self.display_var.get())
        result = 0
        
        try:
            if self.operation == "+":
                result = self.first_operand + second_operand
            elif self.operation == "-":
                result = self.first_operand - second_operand
            elif self.operation == "*":
                result = self.first_operand * second_operand
            elif self.operation == "/":
                if second_operand == 0:
                    messagebox.showerror("Error", "Division by zero!")
                    self.clear()
                    return
                result = self.first_operand / second_operand
            
            # Format the result to avoid unnecessary decimal places
            if result == int(result):
                result = int(result)
            else:
                # Limit to 8 decimal places
                result = round(result, 8)
            
            self.display_var.set(str(result))
            self.operation = None
            self.reset_display = True
        except Exception as e:
            messagebox.showerror("Error", str(e))
            self.clear()
    
    def clear(self):
        self.display_var.set("0")
        self.first_operand = 0
        self.operation = None
        self.reset_display = False
    
    def clear_entry(self):
        self.display_var.set("0")

if __name__ == "__main__":
    root = tk.Tk()
    calc = Calculator(root)
    root.mainloop()